/*
 *
 *   Automatically-generated file.  Do not modify.
 *   Modify pico_ql_directives_utils_c.erb and pico_ql_generator.rb
 *   instead.
 *
 *   Implement the filter and projection functions for
 *   each of the registered virtual tables.
 *
 *   Copyright 2012 Marios Fragkoulis
 *
 *   Licensed under the Apache License, Version 2.0
 *   (the "License");you may not use this file except in
 *   compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in
 *   writing, software distributed under the License is
 *   distributed on an "AS IS" BASIS.
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied.
 *   See the License for the specific language governing
 *   permissions and limitations under the License.
 */

#include <assert.h>
#include <stdio.h>
#include <string.h>

<%#include <list> %>
<%# list include..not always. At least on fk_col_type.length > 0 %>

#ifndef PICO_QL_SINGLE_THREADED
#include <pthread.h>
#endif
<%= directives %>
#include <sqlite3.h>
#include "pico_ql_internal.h"
#include "pico_ql_search_helper.h"
<%     if $argK != "KERNEL" %>
#include "pico_ql_register_table.h"
<%     else %>
#include "pico_ql_exec.h"
<%     end %>

<%     @tables.each { |vt| %>
<%      if vt.base_var.length > 0 %>
<%        /\*/.match(vt.signature_pointer) == nil ? retype = "*" : retype = "" %>
<%        if $argD == "DEBUG" %>
/* C NAME (pico_ql_table_)<%= vt.base_var %>_<%= vt.type.gsub(/(\s*)/, "").gsub(/\*/, "ptr") %> in line <%= vt.base_var_line + 1 %> <%= $argF %>*/
<%        end %>
<%        if /\[/.match(vt.signature) %>
extern <%= vt.assignable_signature.gsub("<variable_name>", "pico_ql_table_#{vt.base_var}_#{vt.type.gsub(/(\s*)/, "").gsub(/\*/, "ptr")}") %>;
<%        else %>
extern <%= vt.signature %> <%= retype %>pico_ql_table_<%= vt.base_var %>_<%= vt.type.gsub(/(\s*)/, "").gsub(/\*/, "ptr") %>;
<%        end %>
<%        if $argD == "DEBUG" %>
#line <%= vt.signature_line + 1 %> "<%= $argF %>" 
<%        end %>
<%      end %>
<%     } %>

/* Registers the base variables of user application code
 * with their virtual table representation.
 */
int register_vt(picoQLTable *picoQL) {
<%    count = 0 %>
<%    @tables.each_index { |vt| %>
<%      if @tables[vt].base_var.length > 0 %>
<%        if count == 0 %>
  if (!strcmp(picoQL->zName, "<%= @tables[vt].name %>")) {
<%	  count += 1 %>
<%        else %>
  } else if (!strcmp(picoQL->zName, "<%= @tables[vt].name %>")) {
<%        end %>
<%        if $argD == "DEBUG" %>
#line <%= @tables[vt].base_var_line + 1 %> "<%= $argF %>" 
<%        end %>
    if (pico_ql_table_<%= @tables[vt].base_var %>_<%= @tables[vt].type.gsub(/(\s*)/, "").gsub(/\*/, "ptr") %> == NULL)
      return SQLITE_ERROR;
    picoQL->data = (void *)pico_ql_table_<%= @tables[vt].base_var %>_<%= @tables[vt].type.gsub(/(\s*)/, "").gsub(/\*/, "ptr") %>;
    picoQL->embedded = 0;
<%      end %>
<%    } %>
  } else {
    picoQL->data = NULL;
    picoQL->embedded = 1;
  }
  return SQLITE_INTERNAL;
}


/* Each embedded virtual table has a column named 'base'.
 * This function checks if a provided column name is indeed 'base'.
 */
int equals(const char *zCol, const char *key) {
  int length = (int)strlen(zCol) + 1;
  char *copy = (char *)sqlite3_malloc(sizeof(char) * length);
  char *token, *copy_root;
  memcpy(copy, zCol, length);
  copy_root = copy;
  token = strsep((char **)&copy, " ");
  if (token != NULL) {
    if (!strcmp(token, key)) {
      sqlite3_free(copy_root);
      return 1;
    } else {
      sqlite3_free(copy_root);
      return 0;
    }
  } else {
      sqlite3_free(copy_root);
      return SQLITE_NOMEM;
  }
}

typedef struct ResultSet {

  size_t malloced;
  size_t size;
  size_t actualSize;
  int offset;
  int resultSetIterState;

} ResultSet;

typedef struct cursor {

  sqlite3_vtab_cursor *cur;
  int open;
<%# deviated from C++ where object does not have ResultSet %>
  ResultSet *res;

} cursor;

typedef struct cursorCharged {

  cursor *c;
  int flag;

} cursorCharged;

struct Vtbl {

  int (*search)(sqlite3_vtab_cursor *, int, int, sqlite3_value *, struct Vtbl*);
  int (*retrieve)(sqlite3_vtab_cursor *, int, sqlite3_context *, struct Vtbl*);
  void (*toOpen)(sqlite3_vtab *, struct Vtbl *);
  size_t (*get_datastructure_size)(sqlite3_vtab_cursor *, sqlite3_vtab *);
<%# perhaps init ResultSet for real? %>
  int (*init_result_set)(sqlite3_vtab *, sqlite3_vtab_cursor *, struct Vtbl*);
  int (*advance_result_set_iter)(sqlite3_vtab_cursor *, struct Vtbl*);
  void (*deinit_result_set)(sqlite3_vtab_cursor *, struct Vtbl*);
  int (*report_charge)(cursor *, int, cursorCharged ***, size_t *, long, struct Vtbl*);
  void (*discharge_saved_results)(struct Vtbl*);
  void (*deinit_query_structs)(struct Vtbl*);
};

typedef struct VtblAll {

  struct Vtbl **instances;
  const char **instanceNames;
  size_t size;

} VtblAll;

VtblAll vtAll = {0, 0, 0};

<%     @tables.each { |vt| %>
<%      if vt.container_class.length > 0 %>
typedef struct <%= vt.name %>ResultSetImpl {
  ResultSet r;
  <%= vt.type.chomp('*') %> **res;
} <%= vt.name %>ResultSetImpl;
<%      end %>

typedef struct <%= vt.name %>VtblImpl {

  struct Vtbl impl;
  picoQLTable *picoQL;
  const char *name;

<%      i = 0 %>
<%      vt.columns.each { |col| %>
<%       if col.related_to.length > 0 %>
<%        col.fk_col_type = $table_index[col.related_to] %>
<%        if $argM == "MEM_MGT" && col.fk_method_ret == 1 %>
  typedef struct saved_results_<%= i %> {
    struct <%= col.fk_col_type.chomp('*') %> **captcha;
    size_t size;
  } saved_results_<%= i %>;

  saved_results_<%= i %> sr<%= i %>;
<%        end %>
<%        col.saved_results_index = i %>
<%        i += 1 %>
<%       end %>
<%      } %>

  cursor **cursors;
  size_t cursorsSize;   /* how many malloced */
<%      if vt.base_var.length == 0 %>
  cursorCharged **charged;
  size_t chargedSize; /* how many malloced */
  int nTimesCharged;
  long *earlyRequestsArray;
  int nEarlyRequests;
  int lateMatches;
  int passNoVerify;
  int recursive;
<%      end %>

} <%= vt.name %>_vt;

<%     } %>

/* Deinitiates vectors which store temporary FK
 * column values so that they are
 * manageable by SQLite safely.
 */
void deinit_temp_structs(void) {
  int i = 0;
  for (i = 0; i < (int)vtAll.size; i++) {
    vtAll.instances[i]->deinit_query_structs(vtAll.instances[i]);
  }
}

/* Deinitiates map which stores pairs of
 * virtual table names to functors virtualizing
 * individual VT search/retrieve implementations.
 */
void deinit_vt_selectors(void) {
<%     @tables.each_index { |vt| %>
  sqlite3_free((char *)((<%= @tables[vt].name %>_vt *)vtAll.instances[<%= vt %>])->name);
  sqlite3_free((cursor **)((<%= @tables[vt].name %>_vt *)vtAll.instances[<%= vt %>])->cursors);
<%      if @tables[vt].base_var.length == 0 %>
  sqlite3_free((cursorCharged **)((<%= @tables[vt].name %>_vt *)vtAll.instances[<%= vt %>])->charged);
<%      end %>
  sqlite3_free((<%= @tables[vt].name %>_vt *)vtAll.instances[<%= vt %>]);
<%     } %>
  sqlite3_free((struct Vtbl **)vtAll.instances);
  sqlite3_free((const char **)vtAll.instanceNames);

}

