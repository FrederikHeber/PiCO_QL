// Filters column values of virtual table <%= @name %>.
int <%= @name %>_vt::operator() (sqlite3_vtab_cursor *cur, int op, int nCol, sqlite3_value *val) {
  picoQLTable *picoQL = (picoQLTable *)cur->pVtab;
  (void)picoQL;	// Silence compiler unused variable warning
  picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
  int checkedSize = 0;
  int cuSize = 0;
  map<sqlite3_vtab_cursor *, Cursor>::iterator c_map_iter;
<%      if /\*/.match(@pointer) == nil %>
<%        type_retype = "#{@type}*" %>
<%      else %>
<%        type_retype = "#{@type}" %>
<%      end %>
<%      if /\*/.match(@signature_pointer) == nil %>
<%        sign_retype = "#{@signature}*" %>
<%        sign_untype = "#{@signature}" %>
<%      else %>
<%        sign_retype = "#{@signature}" %>
<%        sign_untype = "#{@signature.rstrip.chomp("*")}" %>
<%      end %>
  if (cursors.find(cur) == cursors.end()) {
    printf("Cursor %lx not registered. Exiting now.\n", (long)cur);
    return SQLITE_ERROR;
  }
<%      if @container_class.length > 0 %>
  ResultSet *rs = &cursors[cur];
<%      end %>
  if (struct_empty_null(cur, val, picoQL->embedded, nCol)) {
    return SQLITE_OK;
  }
  if (!((picoQLTableCursor *)cur)->active_checked) {
    ((picoQLTableCursor *)cur)->active_checked = 1;
    if (((picoQLTableCursor *)cur)->active_verify) {
      int count = 0;
      for (c_map_iter = c_map.begin(); c_map_iter != c_map.end(); c_map_iter++) {
        if (c_map_iter->second.open) {
          if (((picoQLTableCursor *)c_map_iter->first)->active_owed) {
            count++;
            ((picoQLTableCursor *)c_map_iter->first)->active_verify = 1;
            ((picoQLTableCursor *)c_map_iter->first)->active_owed = 0;
          }
        }
      }
      ((picoQLTableCursor *)cur)->active_verify = 0;
      if (count > 1) {
        printf("WARNING: Table %s, cursor: %lx, More active_owed than 1.\n", picoQL->zName, (long)cur);
      }
#ifdef PICO_QL_DEBUG
      printf("Table %s, Verified mismatched cursor: %lx.\n", picoQL->zName, (long)cur);
#endif
    }
#ifdef PICO_QL_DEBUG
    printf("Table %s, Checked cursor: %lx.\n", picoQL->zName, (long)cur);
#endif
  }
  for (c_map_iter = c_map.begin(); c_map_iter != c_map.end(); c_map_iter++) {
    cuSize += c_map_iter->second.counter;
    if (c_map_iter->second.open)
      checkedSize += ((picoQLTableCursor *)c_map_iter->first)->active_checked;
  }
#ifdef PICO_QL_DEBUG
  printf("Checked cursor size is %i.\n" , checkedSize);
#endif
<%      if @container_class.length > 0 %>
  int index = 0;
<%        if @base_var.length > 0 %>
  if (rs->resBts.size() == 0)
    rs->resBts.resize(stcsr->max_size, 0);
<%        end %>
  int rowNum = -1;
<%        if @@C_container_types.include?(@container_class) %>
  int i = 0;
  bool found = false;
<%        end %>
<%        if @loop.match(/\Wtuple_iter\W/) %>
  <%= @name %>_decl(tuple_iter);
<%        end %>
<%      end %>
<%      if /\[/.match(@signature) %>
  <%= @assignable_signature.gsub("<variable_name>", "any_dstr") %>;
<%      else %>
  <%= sign_retype %> any_dstr = (<%= sign_retype %>)stcsr->source;
<%      end %>
<%      if $argD == "DEBUG" %>
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%      end %>
<%      if @base_var.length > 0 %>
<%        if (@signature <=> @type) != 0 %>
<%# C container %>
<%          if @loop_root.length > 0 %>
  if (<%= @loop_root %> == NULL) {
    return SQLITE_OK;
  }
<%          end %>
<%        end %>
<%      end %>
  int first_constr = stcsr->first_constr;
  if (first_constr)
    stcsr->first_constr = 0;
  if (val == NULL) {
<%      if @base_var.length > 0 %>
<%        if @container_class.length > 0 %>
<%          if @@C_container_types.include?(@container_class) %>
    rs->resBts.clear();
<% loop = display_loop("any_dstr") %>
<% loop.gsub!(/<space>/, "    ") %>
<%# Generate spacing for nested loops %>
    <%= loop %> {
      if (tuple_iter == NULL) continue;
      rs->res.push_back(tuple_iter);
      rs->resBts.push_back(1);
    }
<%            for i in 0..@nloops-1 %>
    }
<%            end %>
<%          else %>
    for (tuple_iter = any_dstr->begin(); tuple_iter != any_dstr->end(); tuple_iter++) {
<%            if !@pointer.match(/,/) && @pointer.match(/\*/) %>
      if (*tuple_iter == NULL) continue;
<%            end %>
      rs->res.push_back(<%= @signature.chomp('*') %>::iterator(tuple_iter));
    }
    rs->resBts.set();
<%          end %>
<%        else %>
    stcsr->size = 1;
<%        end %>
<%      else %>
    printf("Searching embedded VT <%= @name %> with no BASE constraint makes no sense.\n");
    return SQLITE_MISUSE;
<%      end %>
  } else {
<%      if @base_var.length == 0 %>
    if (first_constr) {
      if (equals(picoQL->azColumn[nCol], "base")) {
        int chSize = charged.size();
        int cuchkSize = checkedSize;
//        int cuSize = cursors.size();
        int nEarlyRequests = (int)earlyRequestsArray.size();
        int passClosed = 0;
        long to_base = 0;
        vector<long>::iterator ner_iter;
<%#       if @base_var.length == 0 %>
#ifdef PICO_QL_DEBUG
  printf("Table %s, cursorsSize %i, chargedSize %i, earlyRequests %i, cursorsChecked %i, nTimesCharged %i.\n", picoQL->zName, cuSize, chSize, nEarlyRequests, cuchkSize, nTimesCharged);
#endif
#ifdef ENVIRONMENT64
        to_base = (long)sqlite3_value_int64(val);
#else
        to_base = (long)sqlite3_value_int(val);
#endif
        if (nEarlyRequests - lateMatches > 0) {
          if ((ner_iter = find(earlyRequestsArray.begin(), earlyRequestsArray.end(), to_base)) != earlyRequestsArray.end()) {
#ifdef PICO_QL_DEBUG
            printf("base sent %lx matched base provided %lx.\n", *ner_iter, to_base);
#endif
            //earlyRequestsArray[ner] = -1;
            passClosed = 1;
          } else {
            printf("%i early service requests but to_base %lx not matched.\n", nEarlyRequests, to_base);
            return SQLITE_MISUSE;
          } 
        }  
        if ((cuchkSize == chSize) || 
            (cuSize == nTimesCharged) || 
            (passClosed)) {
#ifdef ENVIRONMENT64
          stcsr->source = (void *)sqlite3_value_int64(val);
#else
          stcsr->source = (void *)sqlite3_value_int(val);
#endif
          if (stcsr->source == NULL) {
            stcsr->isInstanceNULL = 1;
<%        if @container_class.length == 0 %>
            stcsr->size = 1;
<%	  else %>
// BASE is first constraint by default, so no need to delete resultset here.
<%        end %>
            return SQLITE_OK;
          }
          stcsr->isInstanceNULL = 0;
          any_dstr = (<%= sign_retype %>)stcsr->source;
<%        if (@signature <=> @type) != 0 %>
<%          if @loop_root.length > 0 %>
<%# C containers: only then @loop_root %>
	  if (<%= @loop_root %> == NULL) {
	    return SQLITE_OK;
	    }
<%          end %>
<%        end %>
<%        if @container_class.length > 0 %>
          if ((stcsr->max_size = (int)(*this)(cur, cur->pVtab)) == 0) {
            stcsr->isInstanceEmpty = 1;
            return SQLITE_OK;
          } else {
            rs->resBts.resize(stcsr->max_size, 0);
#ifdef PICO_QL_DEBUG
            printf("VT %s reallocated. Now max_size: %i\n", picoQL->zName, stcsr->max_size);
#endif
          }
<%        end %>
          stcsr->isInstanceEmpty = 0;
        } else {
          printf("Searching embedded VT <%= @name %> with invalid BASE constraint cursorsSize %i, chargedCursors %i, recursive is %i, checkedCursors %i, nTimesCharged %i.\n", cuSize, chSize, recursive, cuchkSize, nTimesCharged);
          return SQLITE_MISUSE;
        }
      } else { 
        printf("Searching embedded VT <%= @name %> with first constraint other than BASE constraint.\n");
        return SQLITE_MISUSE;
      }
    }
<%      end %>
#ifdef PICO_QL_DEBUG
  printf("Searching column %i of VT %s, first_constraint %i\n", nCol, picoQL->zName, first_constr);
#endif
