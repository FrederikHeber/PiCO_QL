/* Redirect to the appropriate retrieve function for a virtual table. */
int retrieve(sqlite3_vtab_cursor *cur, int nCol, sqlite3_context *con) {
  picoQLTable *picoQL = (picoQLTable *)cur->pVtab;
  struct Vtbl *retrieveVT;
  int j = 0;
  while ((j < (int)vtAll.size) && (strcmp(vtAll.instanceNames[j], picoQL->zName))) {j++;}
  if (j == (int)vtAll.size) {
    printf("In retrieve: VT %s not registered.\nExiting now.\n", picoQL->zName);
    return SQLITE_ERROR;
  }
  retrieveVT = vtAll.instances[j];
  return retrieveVT->retrieve(cur, nCol, con, retrieveVT);
}

<%     @tables.each { |vt| %>
struct Vtbl <%= vt.name %>_vtbl = {

  <%= vt.name %>_vt_search,
  <%= vt.name %>_vt_retrieve,
  <%= vt.name %>_vt_to_open,
  <%= vt.name %>_vt_get_datastructure_size,
  <%= vt.name %>_vt_init_result_set,
  <%= vt.name %>_vt_advance_result_set_iter,
  <%= vt.name %>_vt_deinit_result_set,
<%      if vt.base_var.length == 0 %>
  <%= vt.name %>_report_charge,
<%      else %>
  0,
<%      end %>
  <%= vt.name %>_vt_discharge_saved_results,
  <%= vt.name %>_vt_deinit_query_structs

};
 
<%     } %>


int set_VtblImpl(void) {
<%     @tables.each_index { |vt| %>
  <%= @tables[vt].name %>_vt *<%= @tables[vt].name %>VT;
<%     } %>
  vtAll.instances = (struct Vtbl **)sqlite3_malloc(sizeof(struct Vtbl *)*<%= @tables.length %>);
  if (vtAll.instances == NULL)
    return SQLITE_NOMEM;
  vtAll.instanceNames = (const char **)sqlite3_malloc(sizeof(const char *)*<%= @tables.length %>);  
  if (vtAll.instanceNames == NULL)
    return SQLITE_NOMEM;
  vtAll.size = (size_t)<%= @tables.length %>;
<%     @tables.each_index { |vt| %>
  <%= @tables[vt].name %>VT = (<%= @tables[vt].name %>_vt *)sqlite3_malloc(sizeof(<%= @tables[vt].name %>_vt));
  if (<%= @tables[vt].name %>VT == NULL)
    return SQLITE_NOMEM;
  <%= @tables[vt].name %>VT->name = (const char *)sqlite3_malloc(sizeof(char)*<%= @tables[vt].name.length + 1 %>);
  if (<%= @tables[vt].name %>VT->name == NULL)
    return SQLITE_NOMEM;
  strcpy((char *)<%= @tables[vt].name %>VT->name, "<%= @tables[vt].name %>");
  vtAll.instanceNames[<%= vt %>] = <%= @tables[vt].name %>VT->name;
  <%= @tables[vt].name %>VT->impl = <%= @tables[vt].name %>_vtbl;
  vtAll.instances[<%= vt %>] = &<%= @tables[vt].name %>VT->impl;
<%      @tables[vt].columns.each { |col| %>
<%       if col.related_to.length > 0 %>
<%        if $argM == "MEM_MGT" && col.fk_method_ret == 1 %>
  <%= @tables[vt].name %>VT->saved_results_<%= saved_results_index %> = {0, 0};
<%        end %>
<%       end %>
<%      } %>
  <%= @tables[vt].name %>VT->picoQL = NULL;
  <%= @tables[vt].name %>VT->cursors = (cursor **)sqlite3_malloc(sizeof(cursor *));
  if (<%= @tables[vt].name %>VT->cursors == NULL)
    return SQLITE_NOMEM;
<%# Will be balanced in first insert (pre_search_c.erb). First realloc will have no effect. %>
  <%= @tables[vt].name %>VT->cursorsSize = 0;
<%      if @tables[vt].base_var.length == 0 %>
  <%= @tables[vt].name %>VT->charged = (cursorCharged **)sqlite3_malloc(sizeof(cursorCharged *));
  if (<%= @tables[vt].name %>VT->charged == NULL)
    return SQLITE_NOMEM;
  <%= @tables[vt].name %>VT->chargedSize = 0;
  <%= @tables[vt].name %>VT->nTimesCharged = 0;
  <%= @tables[vt].name %>VT->earlyRequestsArray = NULL;
  <%= @tables[vt].name %>VT->nEarlyRequests = 0;
  <%= @tables[vt].name %>VT->lateMatches = 0;
  <%= @tables[vt].name %>VT->passNoVerify = 0;
  <%= @tables[vt].name %>VT->recursive = 0;
<%      end %>

<%     } %>
  return SQLITE_OK;
}

/* Thread. Creates the queries and passes them on to PiCO_QL. */
void * thread_sqlite(void *data) {
<%    if $argK == "KERNEL" %>
  sqlite3 *db = (sqlite3 *)data;
<%    else %>
  config *conf = (config *)data;
<%    end %>
  char **queries, **sqlite_names;
  int failure = 0, i;
  int re = SQLITE_OK;
<% view_length = 0 %>
<% @views == nil ? views_length = 0 : views_length = @views.length %>
  queries = (char **)sqlite3_malloc(sizeof(char *) * ( <%= (@tables.length + views_length).to_s %> + conf->npragmas ) );
  sqlite_names = (char **)sqlite3_malloc(sizeof(char *) * ( <%= (@tables.length + views_length).to_s %> + conf->npragmas ) );
  if (queries == NULL) {
    printf("Out of memory\n");
    goto exit;
  }
  if (sqlite_names == NULL) {
    printf("Out of memory\n");
    goto exit;
  }

  for (i = 0; i < conf->npragmas; i++) {
    strcpy(queries[i], conf->pragmas[i]);
    strcpy(sqlite_names[i], "PRAGMA");
  }
<%# <database_name>.<table> does not work for some reason. test. %>
<%# counter %>
<%    @tables.each_index { |vt| %>
<%#     query =  "CREATE VIRTUAL TABLE sth_like_:memory:_.#{@tables[vt].name} USING PicoQL(" %>
<%      query =  "CREATE VIRTUAL TABLE #{@tables[vt].name} USING PicoQL(" %>
<%      @tables[vt].columns.each { |c| %>
<%        query += "#{c.name} #{c.data_type}, " %>
<%      } %>
<%      query = query.chomp(", ") + ")" %>
  queries[<%= vt %> + conf->npragmas] = (char *)sqlite3_malloc(sizeof(char) * <%= query.length %>);
  strcpy(queries[<%= vt %> + conf->npragmas], "<%= query %>");
  sqlite_names[<%= vt %> + conf->npragmas] = "<%= @tables[vt].name %>";
<%    } %>
<%    if views_length > 0 %>
<%      @views.each_index { |vs| %>
  queries[<%= vs + @tables.length %> + conf->npragmas] = (char *)sqlite3_malloc(sizeof(char) * <%= @views[vs].stmt.length.to_s %>);
  strcpy(queries[<%= vs + @tables.length %> + conf->npragmas], "<%= @views[vs].stmt %>");
  sqlite_names[<%= vs + @tables.length %> + conf->npragmas] = "<%= @views[vs].name %>";
<%      } %>
<%    end %>
  if ((failure = set_VtblImpl()) > 0) {
    printf("set_VtblImpl() failed with error code: %d\n", failure);
    goto exit;
  }
<%    if $argK == "KERNEL" %>
  if ((failure = register_table(db, <%= (@tables.length + views_length).to_s %>, <%= @tables.length.to_s %>, (const char **)queries, (const char **)sqlite_names)) != SQLITE_DONE) {
    printf("Register table returns with error code %i.\n", (int)re);
    re = (void *)(long)failure;
  }
<%    else %>
	re = register_table(<%= (@tables.length + views_length).to_s %> + conf->npragmas, <%= @tables.length.to_s %> + conf->npragmas, (const char **)queries, (const char **)sqlite_names, conf->port);
<%    end %>

  exit:
    for (i = 0; i < <%= (@tables.length + views.length).to_s %>; i++)
      sqlite3_free(queries[i]);
    sqlite3_free(queries);
    sqlite3_free(sqlite_names);
    sqlite3_free(data);
    return (void *)(long)re;
}

