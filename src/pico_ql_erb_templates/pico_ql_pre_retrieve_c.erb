/* Retrieves column values of virtual table <%= @name %>. */
int <%= @name %>_vt_retrieve (sqlite3_vtab_cursor *cur, int nCol, sqlite3_context *con, struct Vtbl *vtbl) {
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
  int cr = 0;
<%    if @container_class.length > 0 %>
  ResultSet *rs;
<%    end %>
<%    if /\*/.match(@signature_pointer) == nil %>
<%      sign_retype = "#{@signature}*" %>
<%    else %>
<%      sign_retype = @signature %>
<%    end %>
<%    if @container_class.length == 0 || @base_var.length == 0 %>
  picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
  <%= sign_retype %> any_dstr = (<%= sign_retype %>)stcsr->source;
<%      if $argD == "DEBUG" %>
#line <%= @signature_line + 1 %> "<%= $argF %>" 
<%      end %>
<%    end %>
  while ((cr < (int)cursorsSize) && (cursors[cr]->cur != cur)) {cr++;}
  if (cr == (int)cursorsSize) {
    printf("In <%= @name %>_vt_retrieve: Cursor %li not registered.\nExiting now.\n", (long int)cur);
    return SQLITE_ERROR;
  }
<%    if @container_class.length > 0 %>
  rs = cursors[cr]->res;
<%    end %>
  if (struct_is_empty_null(cur, con)) return SQLITE_OK; 
#ifdef PICO_QL_DEBUG
<%    if @container_class.length > 0 %>
  printf("Retrieving column %i of VT %s element %i\n", nCol, ((picoQLTable *)cur->pVtab)->zName, rs->offset);
<%    else %>
  printf("Retrieving column %i of VT %s\n", nCol, ((picoQLTable *)cur->pVtab)->zName);
<%    end %>
#endif
