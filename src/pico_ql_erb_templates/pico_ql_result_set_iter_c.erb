/* Inform this virtual table that it will be used in the
 * query being planned (otherwise picoQL field is NULL).
 */
void <%= @name %>_vt_to_open (sqlite3_vtab *vtab, struct Vtbl *vtbl) {
  ((<%= @name %>_vt *)vtbl)->picoQL = (picoQLTable *)vtab;
#ifdef PICO_QL_DEBUG
  printf("Table %s set to open in this query.\n", ((<%= @name %>_vt *)vtbl)->name);
#endif
}

/* Returns the size (records) for each virtual table. */
size_t <%= @name %>_vt_get_datastructure_size (sqlite3_vtab_cursor *cur, sqlite3_vtab *vtab) {
  picoQLTable *picoQL = (picoQLTable *)vtab;
<%      if @container_class.length > 0 %>
  picoQL->object = 0;
<%      else %>
  (void)cur;
  picoQL->object = 1;
<%      end %>
  return 1;
}


int <%= @name %>_vt_init_result_set (sqlite3_vtab *vtab, sqlite3_vtab_cursor *cur, struct Vtbl *vtbl) {
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
  int j = 0;
<%      if !@lock.empty? %>
  picoQLTable *picoQL = (picoQLTable *)vtab;
  if (!picoQL->locked) {
<%        if !@lock_argument.empty? %>
<%          if /\*/.match(@signature_pointer) == nil %>
<%                sign_retype = "#{@signature}*" %>
<%          else %>
<%                sign_retype = "#{@signature}" %>
<%          end %>
<%          if !@base_var.empty? %>
<%            if @lock_argument.match(/any_dstr->/) %>
    picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
    <%= sign_retype %> any_dstr = (<%= sign_retype %>)stcsr->source;
<%            end %>
    <%= @lock_class.lock_function %>(<%= @lock_argument %>);
<%          end %>
<%        else %>
    <%= @lock_class.lock_function %>();
<%        end %>
  }
  picoQL->locked += 1;
<%      else %>
  (void)vtab;
  (void)cur;
<%      end %>
  while ((j < (int)cursorsSize) &&
         (cursors[j]->cur != cur)) {j++;}
  if (j == (int)cursorsSize) {
    cursor *c;
<%      if @container_class.length > 0 %>
    <%= @name %>ResultSetImpl *resImpl;
<%      end %>
    ((<%= @name %>_vt *)vtbl)->cursorsSize++;
    cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
    c = sqlite3_malloc(sizeof(cursor));
    if (c == NULL)
      return SQLITE_NOMEM;
    c->cur = cur;
    c->open = 1;
<%      if @container_class.length > 0 %>    
    resImpl = (<%= @name %>ResultSetImpl *)sqlite3_malloc(sizeof(<%= @name 
%>ResultSetImpl));
    if (resImpl == NULL)
      return SQLITE_NOMEM;
    resImpl->r.malloced = 10;
    resImpl->r.size = 0;
    resImpl->r.actualSize = 0;
    resImpl->r.offset = -1;
    resImpl->r.resultSetIterState = -1;
    c->res = &resImpl->r;
    resImpl->res = (<%= @type.chomp('*') %> **)sqlite3_malloc(sizeof(<%= @type.chomp('*') %> *) * resImpl->r.malloced);
    if (resImpl->res == NULL)
      return SQLITE_NOMEM;
<%      else %>
<%# ResultSet unused for object %>
    c->res = NULL;
<%      end %>
    ((<%= @name %>_vt *)vtbl)->cursors = (cursor **)sqlite3_realloc(((<%= @name %>_vt *)vtbl)->cursors, sizeof(cursor *)*cursorsSize);
    if (((<%= @name %>_vt *)vtbl)->cursors == NULL)
      return SQLITE_NOMEM;
/*    cursors = ((<%= @name %>_vt *)vtbl)->cursors; */
    ((<%= @name %>_vt *)vtbl)->cursors[cursorsSize-1] = c;
#ifdef PICO_QL_DEBUG
    printf("Table %s, Cursor: %lx inserted, max_size %i.\n", ((picoQLTable *)cur->pVtab)->zName, (long)cur, ((picoQLTableCursor *)cur)->max_size);
#endif
  }
#ifdef PICO_QL_DEBUG
  printf("Table %s_vt_init_result_set search is active on cursor %lx, member %i of cursors.\n", ((picoQLTable *)cur->pVtab)->zName, (long)cur, j);
#endif
  return SQLITE_OK;
}


int <%= @name %>_vt_advance_result_set_iter (sqlite3_vtab_cursor *cur, 
                                      struct Vtbl* vtbl) {
  picoQLTableCursor *stc = (picoQLTableCursor *)cur;
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
  int j = 0;
<%    if @container_class.length > 0 %>
  ResultSet *res;
<%    end %>
  while ((j < (int)cursorsSize) && (cursors[j]->cur != cur)) {j++;}
  if (j == (int)cursorsSize) {
    printf("In <%= @name %>_vt_next_resultSet: Cursor %li not registered.\nExiting now.\n", (long int)cur);
    return SQLITE_ERROR;
  }
<%    if @container_class.length > 0 %>
  res = cursors[j]->res;
  if ((int)res->size > 0) {
    if (res->resultSetIterState == -1) {
      res->actualSize = res->size;
      res->offset = 0;
      res->resultSetIterState = 1;
    } else if (res->resultSetIterState == 1) {
      res->offset++;
    }
    while ((res->offset < res->size) && (((<%= @name %>ResultSetImpl *)res)->res[res->offset] == 0)) {res->offset++;}
    if (res->offset < res->size) {
#ifdef PICO_QL_DEBUG
      picoQLTable *st = (picoQLTable *)cur->pVtab;
      printf("Table %s, now res->offset: %i, res->size %i, stc->isEof: %i\n\n", st->zName, res->offset, (int)res->size, stc->isEof);
#endif
      return SQLITE_OK;
    }
  }
  stc->isEof = 1;
  res->size = 0;
  res->actualSize = 0;
  res->offset = -1;
  res->resultSetIterState = -1;
<%    else %>
  stc->offset++;
  if (stc->offset >= stc->size)
    stc->isEof = 1;
<%    end %>
#ifdef PICO_QL_DEBUG
  printf("Table %s, stc->isEof: %i\n\n", ((picoQLTable *)cur->pVtab)->zName, stc->isEof);
  printf("stc->offset: %i, stc->size: %i\n", stc->offset, stc->size);
#endif
  return SQLITE_OK;
}

void <%= @name %>_vt_deinit_result_set (sqlite3_vtab_cursor *cur, struct Vtbl *vtbl) {
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
<%      if !@lock.empty? %>
  picoQLTable *picoQL = (picoQLTable *)cur->pVtab;
<%      end %>
  int j = 0;
  while ((j < (int)cursorsSize) && (cursors[j]->cur != cur)) {j++;}
  if (j == (int)cursorsSize) {
    printf("In <%= @name %>_vt_deinit_resultSet: Cursor %li not registered.\n", (long int)cur);
  } else {
<%      if @container_class.length > 0 %>
    ResultSet *res = cursors[j]->res;
    sqlite3_free(((<%= @name %>ResultSetImpl *)res)->res);
    ((<%= @name %>ResultSetImpl *)res)->r.malloced = 0;
    sqlite3_free((<%= @name %>ResultSetImpl *)res);
<%      end %>
    cursors[j]->cur = NULL;
    cursors[j]->open = 0;
  }
<%      if !@lock.empty? %>
  if (picoQL->locked == 1) {
<%        if !@lock_argument.empty? %>
<%          if /\*/.match(@signature_pointer) == nil %>
<%                sign_retype = "#{@signature}*" %>
<%          else %>
<%                sign_retype = "#{@signature}" %>
<%          end %>
    picoQLTableCursor *stcsr = (picoQLTableCursor *)cur;
    if (!stcsr->isInstanceNULL) {
<%          if @lock_argument.match(/any_dstr->/) %>
      <%= sign_retype %> any_dstr = (<%= sign_retype %>)stcsr->source;
<%          end %>
      <%= @lock_class.unlock_function %>(<%= @lock_argument %>);
    }
<%        else %>
    <%= @lock_class.unlock_function %>();
<%        end %>
  }
  picoQL->locked -= 1;
<%      end %>
}

<%    if @base_var.length == 0 %>

int <%= @name %>_report_charge (cursor *c, int offset, cursorCharged ***oCharged, size_t *oChargedSize, long base, struct Vtbl *vtbl) {
  picoQLTable *picoQL = ((<%= @name %>_vt *)vtbl)->picoQL;
  cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
  size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
  cursorCharged **charged = ((<%= @name %>_vt *)vtbl)->charged;
  size_t chargedSize = ((<%= @name %>_vt *)vtbl)->chargedSize;
  int i = 0;
  sqlite3_vtab_cursor *joining_cur = NULL;
  int joining = 0;
  if (!picoQL) return SQLITE_OK; /* VT not participating in this query. */
  if (offset) {
    int j = 0;
#ifdef PICO_QL_DEBUG
    const char *name = ((<%= @name %>_vt *)vtbl)->name;
    printf("Table %s, report_charge: cursor size: %i, charged size %i, cursor to charge %lx.\n", name, (int)cursorsSize, (int)chargedSize, (long)c);
#endif
    while (j < (int)cursorsSize) {
      if (cursors[j]->open) {
        if (((picoQLTableCursor *)cursors[j]->cur)->active_verify) {
          if (!joining) {
            ((picoQLTableCursor *)cursors[j]->cur)->active_verify = 0;
            if (((<%= @name %>_vt *)vtbl)->passNoVerify)
              ((<%= @name %>_vt *)vtbl)->passNoVerify--;
            else {
              joining_cur = cursors[j]->cur;
              joining = 1;
            }
          } else
            ((picoQLTableCursor *)joining_cur)->active_owed = 1;
        }
      }
      j++;
    }
    if ((cursorsSize > 0) && (!joining))
      return SQLITE_OK;  /* Done servicing searches. */
    j = 0;
    while ((j < (int)chargedSize) && (charged[j]->c != c)) {j++;}
    ((<%= @name %>_vt *)vtbl)->nTimesCharged++;
    if ((cursorsSize == 0) && (picoQL) && (picoQL->toOpen)) {
      ((<%= @name %>_vt *)vtbl)->nEarlyRequests++;
      if (((<%= @name %>_vt *)vtbl)->nEarlyRequests == 1)
        ((<%= @name %>_vt *)vtbl)->earlyRequestsArray = (long *)sqlite3_malloc(sizeof(long));
      else
        ((<%= @name %>_vt *)vtbl)->earlyRequestsArray = (long *)sqlite3_realloc(((<%= @name %>_vt *)vtbl)->earlyRequestsArray, sizeof(long) * ((<%= @name %>_vt *)vtbl)->nEarlyRequests);
      ((<%= @name %>_vt *)vtbl)->earlyRequestsArray[((<%= @name %>_vt *)vtbl)->nEarlyRequests - 1] = base;
#ifdef PICO_QL_DEBUG
      printf("Recorded base to provide %lx at position %i, that is recorded %lx.\n", base, ((<%= @name %>_vt *)vtbl)->nEarlyRequests - 1, ((<%= @name %>_vt *)vtbl)->earlyRequestsArray[((<%= @name %>_vt *)vtbl)->nEarlyRequests - 1]);
#endif
    }  
    if (j == (int)chargedSize) {
      cursorCharged *ch = sqlite3_malloc(sizeof(cursorCharged));
      ((<%= @name %>_vt *)vtbl)->chargedSize++;
      chargedSize = ((<%= @name %>_vt *)vtbl)->chargedSize;
      if (ch == NULL)
        return SQLITE_NOMEM;
      ch->c = c;
      ch->flag = 0;
      if (cursorsSize == 0) ((<%= @name %>_vt *)vtbl)->passNoVerify++;
      ((<%= @name %>_vt *)vtbl)->charged = (cursorCharged **)sqlite3_realloc(((<%= @name %>_vt *)vtbl)->charged, sizeof(cursorCharged *)*chargedSize);
      if (((<%= @name %>_vt *)vtbl)->charged == NULL)
        return SQLITE_NOMEM;
      ((<%= @name %>_vt *)vtbl)->charged[chargedSize-1] = ch;
#ifdef PICO_QL_DEBUG
      printf("Table %s, chargedCursor: %lx inserted, cursor %lx\n", name, (long)ch, (long)ch->c);
#endif
      if (oCharged != NULL) {
        j = 0;
        while (j < (int)*oChargedSize) {
          for (i = 0; i < (int)cursorsSize; i++) { 
            if ((cursors[i]->cur == (*oCharged)[j]->c->cur) &&
                (cursors[i]->cur != NULL)) {
              if (!(*oCharged)[j]->flag) {
                ((<%= @name %>_vt *)vtbl)->recursive += 1;
                (*oCharged)[j]->flag = 1;
              }
            }
          }
          j++;
        }
      }
    }
  } else {
    for (i = 0; i < (int)chargedSize; i++)
      sqlite3_free(charged[i]);
    ((<%= @name %>_vt *)vtbl)->chargedSize = 0;
    ((<%= @name %>_vt *)vtbl)->nTimesCharged = 0;
    if (((<%= @name %>_vt *)vtbl)->nEarlyRequests > 0)
      sqlite3_free(((<%= @name %>_vt *)vtbl)->earlyRequestsArray);
    ((<%= @name %>_vt *)vtbl)->nEarlyRequests = 0;
    ((<%= @name %>_vt *)vtbl)->lateMatches = 0;
    ((<%= @name %>_vt *)vtbl)->passNoVerify = 0;
    ((<%= @name %>_vt *)vtbl)->recursive = 0;
#ifdef PICO_QL_DEBUG
    printf("Table %s, freed temp structs for VTs representing embedded data structures.\n", ((<%= @name %>_vt *)vtbl)->name);
#endif
  }
  return SQLITE_OK;
}

<%    end %>

void <%= @name %>_vt_discharge_saved_results (struct Vtbl *vtbl) {
<%      @columns.each { |col| %>
<%       if $argM == "MEM_MGT" && col.related_to.length > 0 && col.fk_method_ret == 1 %>
  sqlite3_free(((<%= @name %>_vt *)vtbl)->sr_<%= col.saved_results_index %>.captcha);
<%       end %>
<%      } %>
}

void <%= @name %>_vt_deinit_query_structs (struct Vtbl *vtbl) {
  if (((<%= @name %>_vt *)vtbl)->picoQL) {
    cursor **cursors = ((<%= @name %>_vt *)vtbl)->cursors;
    size_t cursorsSize = ((<%= @name %>_vt *)vtbl)->cursorsSize;
    int cr;
    vtbl->discharge_saved_results(vtbl);
    if (vtbl->report_charge)
      vtbl->report_charge(NULL, 0, NULL, 0, 0, vtbl);
    for (cr = 0; cr < (int)cursorsSize; cr++)
      sqlite3_free(cursors[cr]);
    ((<%= @name %>_vt *)vtbl)->cursorsSize = 0;
#ifdef PICO_QL_DEBUG
    printf("Table %s picoQL is %lx; freeing query structs.\n", ((<%= @name %>_vt *)vtbl)->name, (long)((<%= @name %>_vt *)vtbl)->picoQL);
#endif
    ((<%= @name %>_vt *)vtbl)->picoQL->toOpen = 0;
    assert(((<%= @name %>_vt *)vtbl)->picoQL->locked == 0);
    ((<%= @name %>_vt *)vtbl)->picoQL->locked = 0;
    ((<%= @name %>_vt *)vtbl)->picoQL = NULL;
  }
}
