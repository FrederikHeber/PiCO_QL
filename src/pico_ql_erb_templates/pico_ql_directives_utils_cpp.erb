/*
 *
 *   Automatically-generated file.  Do not modify.
 *   Modify pico_ql_directives_utils_cpp.erb and pico_ql_generator.rb
 *   instead.
 *
 *   Implement the filter and projection functions for
 *   each of the registered virtual tables.
 *
 *   Copyright 2012 Marios Fragkoulis
 *
 *   Licensed under the Apache License, Version 2.0
 *   (the "License");you may not use this file except in
 *   compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in
 *   writing, software distributed under the License is
 *   distributed on an "AS IS" BASIS.
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied.
 *   See the License for the specific language governing
 *   permissions and limitations under the License.
 */

#include <cassert>
#include <cstdio>
#include <cstring>
#include <string>
#include <map>
#include <set>
#ifdef PICO_QL_HANDLE_TEXT_ARRAY
#include <vector>
#endif
#include <list>
<%# list include..not always. At least on fk_col_type.length > 0 %>
#include <boost/concept_check.hpp>
#include <boost/dynamic_bitset.hpp>
#ifndef PICO_QL_SINGLE_THREADED
#include <pthread.h>
#endif
<%= directives %>
#include "pico_ql_internal.h"
#include "pico_ql_search_helper.h"
#include "pico_ql_register_table.h"


using namespace std;
using namespace boost;

namespace picoQL {

<%    if $argc == "CONCEPT_CHECK" %>
template <class T>
void forward_container_concept_check(T x) {
  BOOST_CONCEPT_ASSERT((ForwardContainer<T>));
  (void)x;
};

template <class It>
class forward_iterator_concept_class {
  BOOST_CONCEPT_ASSERT((ForwardIterator<It>));
};

// For the compiler to verify.
void check_concepts() {
<%      @tables.each_index { |vt| %>
<%        if @tables[vt].container_class.length > 0 && !VirtualTable.C_container_types.include?(@tables[vt].container_class) %>
<%# Chomp the pointer from signature. %>
<%# For non-pointers it will have zero effect. %>
  <%= @tables[vt].signature.chomp('*') %> container_instance<%= vt %>;
  forward_container_concept_check(container_instance<%= vt %>);
  forward_iterator_concept_class<<%= @tables[vt].signature.chomp('*') %>::iterator> it<%= vt %>;
  (void)it<%= vt %>;	// Silence compiler unused variable warning
 
<%        end %>
<%      } %>
}
<%    end %>

struct name_cmp {
  bool operator()(const char *a, const char *b) {
    return strcmp(a, b) < 0;
  }
};

static map<string, VtblImpl*> selector_vt;

<%     @tables.each { |vt| %>
<%      if vt.base_var.length > 0 %>
<%        type = vt.type.gsub(/(\s*)/, "").gsub(/,/, "").gsub(/</, "").gsub(/>/, "").gsub(/:{2}/, "").gsub(/\*/, "ptr") %>
<%        /\*/.match(vt.signature_pointer) == nil ? retype = "*" : retype = "" %>
<%        if $argD == "DEBUG" %>
// C NAME (pico_ql_table_)<%= vt.base_var %>_<%= type %> in line <%= vt.base_var_line + 1 %> <%= $argF %> 
<%        end %>
<%        if /\[/.match(vt.signature) %>
extern <%= vt.assignable_signature.gsub("<variable_name>", "pico_ql_table_#{vt.base_var}_#{type}") %>;
<%        else %>
extern <%= vt.signature %> <%= retype %>pico_ql_table_<%= vt.base_var %>_<%= type %>;
<%        end %>
<%        if $argD == "DEBUG" %>
#line <%= vt.signature_line + 1 %> "<%= $argF %>" 
<%        end %>
<%      end %>
<%     } %>


// Thread. Creates the queries and passes them on to PiCO_QL.
void * thread_sqlite(void *data) {
  const char **queries, **sqlite_names;
  int re = SQLITE_OK;
  config *conf = (config *)data;
  int i;
<% view_length = 0 %>
<% @views == nil ? views_length = 0 : views_length = @views.length %>
  queries = (const char **)sqlite3_malloc(sizeof(const char *) * <%= (@tables.length + views_length).to_s %> + conf->npragmas);
  if (queries == NULL) {
    printf("Out of memory\n");
    return NULL;
  }
  sqlite_names = (const char **)sqlite3_malloc(sizeof(const char *) * <%= (@tables.length + views_length).to_s %> + conf->npragmas);
  if (sqlite_names == NULL) {
    printf("Out of memory\n");
    return NULL;
  }

  for (i = 0; i < conf->npragmas; i++) {
    queries[i] = conf->pragmas[i];
#ifdef PICO_QL_DEBUG
    printf("Set pragma: %s\n", queries[i]);
#endif
    sqlite_names[i] = "PRAGMA";
  }
<%# <database_name>.<table> does not work for some reason. test. %>
<%# counter %>
<%    @tables.each_index { |vt| %>
<%#     query =  "CREATE VIRTUAL TABLE sth_like_:memory:_.#{@tables[vt].name} USING PicoQL(" %>
<%      query =  "CREATE VIRTUAL TABLE #{@tables[vt].name} USING PicoQL(" %>
<%      @tables[vt].columns.each { |c| %>
<%        query += "#{c.name} #{c.data_type}, " %>
<%      } %>
<%      query = query.chomp(", ") + ")" %>
  queries[<%= vt %> + conf->npragmas] = "<%= query %>";
  sqlite_names[<%= vt %>+ conf->npragmas] = "<%= @tables[vt].name %>";
<%    } %>
<%    if views_length > 0 %>
<%      @views.each_index { |vs| %>
  queries[<%= vs + @tables.length %> + conf->npragmas] = "<%= @views[vs].stmt %>";
  sqlite_names[<%= vs + @tables.length %> + conf->npragmas] = "<%= @views[vs].name %>";
<%      } %>
<%    end %>
  set_selectors();
  re = register_table(<%= (@tables.length + views_length).to_s %> + conf->npragmas, <%= @tables.length.to_s %> + conf->npragmas, queries, sqlite_names, conf->port, conf->db);
  sqlite3_free(queries);
  sqlite3_free(sqlite_names);
  delete conf;
  return (void *)(long)re;
}


/* Registers the base variables of user application code
 * with their virtual table representation.
 */
int register_vt(picoQLTable *picoQL) {
<%    count = 0 %>
<%    @tables.each_index { |vt| %>
<%      if @tables[vt].base_var.length > 0 %>
<%        type = @tables[vt].type.gsub(/(\s*)/, "").gsub(/,/, "").gsub(/</, "").gsub(/>/, "").gsub(/:{2}/, "").gsub(/\*/, "ptr") %>
<%        if count == 0 %>
  if (!strcmp(picoQL->zName, "<%= @tables[vt].name %>")) {
<%	  count += 1 %>
<%        else %>
  } else if (!strcmp(picoQL->zName, "<%= @tables[vt].name %>")) {
<%        end %>
<%        if $argD == "DEBUG" %>
#line <%= @tables[vt].base_var_line + 1 %> "<%= $argF %>" 
<%        end %>
    if (pico_ql_table_<%= @tables[vt].base_var %>_<%= type %> == NULL)
      return SQLITE_ERROR;
    picoQL->data = (void *)pico_ql_table_<%= @tables[vt].base_var %>_<%= type %>;
    picoQL->embedded = 0;
<%      end %>
<%    } %>
  } else {
    picoQL->data = NULL;
    picoQL->embedded = 1;
  }
  return SQLITE_INTERNAL;
}


// Each embedded virtual table has a column named 'base'.
// This function checks if a provided column name is indeed 'base'.
int equals(const char *zCol, const char *key) {
  int status;
  int length = (int)strlen(zCol) + 1;
  char *copy = (char *)sqlite3_malloc(sizeof(char) * length);
  char *token;
  memcpy(copy, zCol, length);
  token = strtok(copy, " ");
  if (token != NULL) {
    if (!strcmp(token, key))
      status = true;
    else
      status = false;
  } else
    status = SQLITE_NOMEM;
  sqlite3_free(copy);
  return status;
}

/* Deinitiates vectors which store temporary FK
 * column values so that they are
 * manageable by SQLite safely.
 */
void deinit_temp_structs(void) {
<%     @tables.each { |vt| %>
  VtblImpl *discharge<%= vt.name %>VT = selector_vt["<%= vt.name %>"];
<%      if vt.base_var.length == 0 %>
  map<Cursor *, bool> *map<%= vt.name %>;
  map<%= vt.name %> = NULL;
  (*discharge<%= vt.name %>VT)(NULL, 0, map<%= vt.name %>, 0);
<%      end %>
  (*discharge<%= vt.name %>VT)("clear_saved_results");
<%     } %>
}

/* Deinitiates map which stores pairs of
 * virtual table names to functors virtualizing
 * individual VT search/retrieve implementations.
 */
void deinit_vt_selectors(void) {
  map<string, VtblImpl *>::iterator it;
  for (it = selector_vt.begin(); it != selector_vt.end(); it++)
    delete it->second;
}


<%     @tables.each { |vt| %>
class <%= vt.name %>_vt : public VtblImpl {
private:
  picoQLTable *picoQL;
<%      i = 0 %>
<%      vt.columns.each { |col| %>
<%       if col.related_to.length > 0 %>
<%        col.fk_col_type = $table_index[col.related_to] %>
<%        if $argM == "MEM_MGT" && col.fk_method_ret == 1 %>
list <<%= col.fk_col_type.chomp('*') %> > saved_results_<%= i %>;
<%        end %>
<%        col.saved_results_index = i %>
<%        i += 1 %>
<%       end %>
<%      } %>
#ifdef PICO_QL_HANDLE_TEXT_ARRAY
/* Dynamic vector which stores resultset column
 * values of type char array so that they are retrievable
 * by SQLite without conflict.
 */
  vector<string> textVector;
#endif
<%      if vt.container_class.length > 0 %>
  class ResultSet {
  public:
<%        vt.pointer.match(/\*/) ? type_retype = "" : type_retype = "*" %>
<%        if VirtualTable.C_container_types.include?(vt.container_class) %>
    vector<<%= vt.type %><%= type_retype %>> res;
    vector<<%= vt.type %><%= type_retype %>>::iterator resIter;
<%        else %>
    vector<<%= vt.signature.chomp('*') %>::iterator> res;
    vector<<%= vt.signature.chomp('*') %>::iterator>::iterator resIter;
<%        end %>
    dynamic_bitset<unsigned long> resBts;
    int resultSetIterState;
    int offset;
<%        if VirtualTable.C_container_types.include?(vt.container_class) %>
    ResultSet(int res_max_size, int resIterState, int off, vector<<%= vt.type %><%= type_retype %>>::iterator it) {
<%        else %>
    ResultSet(int res_max_size, int resIterState, int off, vector<<%= vt.signature.chomp('*') %>::iterator>::iterator it) {
<%        end %>
      resBts.resize(res_max_size);
      resultSetIterState = resIterState;
      offset = off;
      resIter = it;
    };
    ResultSet() {};
    ~ResultSet() {resBts.clear();};
<%        if VirtualTable.C_container_types.include?(vt.container_class) %>
    void set(int res_max_size, int resIterState, int off, vector<<%= vt.type %><%= type_retype %>>::iterator it) {
<%        else %>
    void set(int res_max_size, int resIterState, int off, vector<<%= vt.signature.chomp('*') %>::iterator>::iterator it) {
<%        end %>
      resBts.resize(res_max_size);
      resultSetIterState = resIterState;
      offset = off;
      resIter = it;
    };
  };
  map<sqlite3_vtab_cursor *, ResultSet> cursors;
<%        if VirtualTable.C_container_types.include?(vt.container_class) %>
  vector<<%= vt.type %><%= type_retype %>>::iterator resIterC;
<%          if vt.loop.empty? %>
<%# Tables with @loop take care of this with _decl(tuple_iter). Silencing compiler unused variable error. %>
  <%= vt.type %><%= type_retype %> tuple_iter;
<%          end %>
<%        else %>
  vector<<%= vt.signature.chomp('*') %>::iterator>::iterator resIterC;
  <%= vt.signature.chomp('*') %>::iterator tuple_iter;
<%        end %>
<%      else %>
  set<sqlite3_vtab_cursor *> cursors;
<%      end %>
  map<sqlite3_vtab_cursor *, Cursor> c_map;
<%      if vt.base_var.length == 0 %>
  map<Cursor *, bool> charged;
  int nTimesCharged;
  vector<long> earlyRequestsArray;
  int lateMatches;
  int passNoVerify;
  int recursive;
<%      end %>
public:
  <%= vt.name %>_vt() : VtblImpl() {
    picoQL = NULL;
<% if vt.base_var.length == 0 %>    recursive = 0; nTimesCharged = 0; lateMatches = 0; passNoVerify = 0;<% end %>};
  virtual int operator() (sqlite3_vtab_cursor *, int,
                    int, sqlite3_value *);
  virtual int operator() (sqlite3_vtab_cursor *,
                    int, sqlite3_context *);
  virtual void operator() (sqlite3_vtab *);
  virtual size_t operator() (sqlite3_vtab_cursor *, sqlite3_vtab *);
  virtual int operator() (sqlite3_vtab_cursor *);
  virtual void operator() (sqlite3_vtab_cursor *, void *);
  virtual int operator() (sqlite3_vtab *, sqlite3_vtab_cursor *);
<%      if vt.base_var.length == 0 %>
  virtual int operator() (Cursor *c, int current, map<Cursor *, bool> *oCharged, long base) {
    pair<map<Cursor *, bool>::iterator, bool> operation;
    map<sqlite3_vtab_cursor *, Cursor>::iterator c_map_iter, c_map_iter_joining;
    bool joining = false;
    if (!picoQL) return SQLITE_OK; // VT not participating in this query.
    if (current) {
      for (c_map_iter = c_map.begin(); c_map_iter != c_map.end(); c_map_iter++) {
        if (c_map_iter->second.open) {
          if (((picoQLTableCursor *)c_map_iter->first)->active_verify) {
            if (!joining) {
              ((picoQLTableCursor *)c_map_iter->first)->active_verify = 0;
              if (passNoVerify)
                passNoVerify--;
              else {
                c_map_iter_joining = c_map_iter;
                joining = true;
              }
            } else
              ((picoQLTableCursor *)c_map_iter_joining->first)->active_owed = 1;
          }
        }
      }
      if ((c_map.size() > 0) && (!joining))
        return SQLITE_OK; // Done servicing searches.
      nTimesCharged++;
      if ((c_map.size() == 0) && (picoQL) && (picoQL->toOpen)) {
        earlyRequestsArray.push_back(base);
#ifdef PICO_QL_DEBUG
        printf("In report charge: recorded base to provide %lx at position %i.\n", earlyRequestsArray.back(), (int)(earlyRequestsArray.size() - 1));
#endif
      }
      operation = charged.insert(pair<Cursor *, bool>(c, false));
      if (operation.second) {
        if (c_map.size() == 0) passNoVerify++;
        if (oCharged != NULL) {
          map<Cursor *, bool>::iterator iter;
          for (iter = oCharged->begin(); iter != oCharged->end(); iter++) {
            if (c_map.find(iter->first->cur) != c_map.end()) {
              if (!iter->second) {
                recursive += 1;
                iter->second = true;
              }
            }
          }
        }
      }
    } else {
      if (picoQL) {
        charged.clear();
        nTimesCharged = 0;
        earlyRequestsArray.clear();
        lateMatches = 0;
        passNoVerify = 0;
        recursive = 0;
#ifdef PICO_QL_DEBUG
        printf("Table %s, freed temp structs for VT representing embedded data structure.\n", picoQL->zName);
#endif
      }
    }
    return SQLITE_OK;
  };
<%      else %>
  virtual int operator() (Cursor *, int, map<Cursor *, bool> *, long) {return SQLITE_OK;};
<%      end %>

  virtual void operator() (const char *dummy) {
    (void)dummy;
    if (picoQL) {
      cursors.clear();
      c_map.clear();
      picoQL->toOpen = 0;
      assert(picoQL->locked == 0);
      picoQL->locked = 0;
#ifdef PICO_QL_DEBUG
      printf("Table %s picoQL is %lx; freeing query structs.\n", picoQL->zName, (long)picoQL);
#endif
      picoQL = NULL;
<%      vt.columns.each { |col| %>
<%       if $argM == "MEM_MGT" && col.related_to.length > 0 && col.fk_method_ret == 1 %>
      saved_results_<%= col.saved_results_index %>.clear();    
<%       end %>
<%      } %>
    }
  };
};
 
<%     } %>
 
 
